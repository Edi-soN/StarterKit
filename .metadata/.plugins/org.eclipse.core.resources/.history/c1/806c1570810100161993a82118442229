package com.capgemini.test;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;

import com.capgemini.java.Cell;
import com.capgemini.java.Game;

public class GameTest {
	@Test
	public void shouldReturnZeroForAliveCellWithLessThanTwoNeighbors() {
		// given
		List<Cell> cellList = new ArrayList<>();
		cellList.add(new Cell(0));
		cellList.add(new Cell(0));
		cellList.add(new Cell(0));
		cellList.add(new Cell(0));
		cellList.add(new Cell(1));
		cellList.add(new Cell(1));
		cellList.add(new Cell(0));
		cellList.add(new Cell(0));
		cellList.add(new Cell(0));
		Game game = new Game();
		// when
		int result = game.isCellAliveInNextGeneration(cellList);
		// then
		assertEquals(0, result);
	}
	
	@Test
	public void shouldReturnZeroForAliveCellWithMoreThanThreeNeighbors() {
		// given
		List<Cell> cellList = new ArrayList<>();
		cellList.add(new Cell(1));
		cellList.add(new Cell(1));
		cellList.add(new Cell(1));
		cellList.add(new Cell(1));
		cellList.add(new Cell(1));
		cellList.add(new Cell(1));
		cellList.add(new Cell(1));
		cellList.add(new Cell(1));
		cellList.add(new Cell(1));
		Game game = new Game();
		// when
		int result = game.isCellAliveInNextGeneration(cellList);
		// then
		assertEquals(0, result);
	}
	
	@Test
	public void shouldReturnOneForAliveCellWithTwoNeighbors() {
		// given
		List<Cell> cellList = new ArrayList<>();
		cellList.add(new Cell(0));
		cellList.add(new Cell(0));
		cellList.add(new Cell(0));
		cellList.add(new Cell(0));
		cellList.add(new Cell(1));
		cellList.add(new Cell(1));
		cellList.add(new Cell(0));
		cellList.add(new Cell(0));
		cellList.add(new Cell(1));
		Game game = new Game();
		// when
		int result = game.isCellAliveInNextGeneration(cellList);
		// then
		assertEquals(1, result);
	}
	
	@Test
	public void shouldReturnOneForAliveCellWithThreeNeighbors() {
		// given
		List<Cell> cellList = new ArrayList<>();
		cellList.add(new Cell(0));
		cellList.add(new Cell(0));
		cellList.add(new Cell(1));
		cellList.add(new Cell(0));
		cellList.add(new Cell(1));
		cellList.add(new Cell(1));
		cellList.add(new Cell(0));
		cellList.add(new Cell(0));
		cellList.add(new Cell(1));
		Game game = new Game();
		// when
		int result = game.isCellAliveInNextGeneration(cellList);
		// then
		assertEquals(1, result);
	}
	
	@Test
	public void shouldReturnOneForDeadCellWithThreeNeighbors() {
		// given
		List<Cell> cellList = new ArrayList<>();
		cellList.add(new Cell(0));
		cellList.add(new Cell(0));
		cellList.add(new Cell(1));
		cellList.add(new Cell(0));
		cellList.add(new Cell(0));
		cellList.add(new Cell(1));
		cellList.add(new Cell(0));
		cellList.add(new Cell(0));
		cellList.add(new Cell(1));
		Game game = new Game();
		// when
		int result = game.isCellAliveInNextGeneration(cellList);
		// then
		assertEquals(1, result);
	}
}
