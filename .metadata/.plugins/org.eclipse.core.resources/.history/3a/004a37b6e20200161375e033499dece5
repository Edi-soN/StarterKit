package com.capgemini.test;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.Test;

import com.capgemini.java.Cell;
import com.capgemini.java.Game;

public class GameTest {
	@Test
	public void shouldReturnZeroForAliveCellWithLessThanTwoNeighbors() {
		// given
		Cell[] cells = new Cell[] {new Cell(0,0,false),};
		List<Cell> cellList = new ArrayList<>(Arrays.asList(cells);
		Game game = new Game(cellList);
		// when
		int result = 0;;
		// then
		assertEquals(0, result);
	}
	
	@Test
	public void shouldReturnZeroForAliveCellWithMoreThanThreeNeighbors() {
		// given
		List<Cell> cellList = new ArrayList<>();
		cellList.add(new Cell(0,0,1));
		cellList.add(new Cell(0,1,1));
		cellList.add(new Cell(0,2,1));
		cellList.add(new Cell(1,0,1));
		cellList.add(new Cell(1,1,1));
		cellList.add(new Cell(1,2,1));
		cellList.add(new Cell(2,0,1));
		cellList.add(new Cell(2,1,1));
		cellList.add(new Cell(2,2,1));
		Game game = new Game(1,1,cellList);
		// when
		int result = game.isCellAliveInNextGeneration();
		// then
		assertEquals(0, result);
	}
	
	@Test
	public void shouldReturnOneForAliveCellWithTwoNeighbors() {
		// given
		List<Cell> cellList = new ArrayList<>();
		cellList.add(new Cell(0,0,0));
		cellList.add(new Cell(0,1,0));
		cellList.add(new Cell(0,2,0));
		cellList.add(new Cell(1,0,0));
		cellList.add(new Cell(1,1,1));
		cellList.add(new Cell(1,2,1));
		cellList.add(new Cell(2,0,0));
		cellList.add(new Cell(2,1,0));
		cellList.add(new Cell(2,2,1));
		Game game = new Game(1,1,cellList);
		// when
		int result = game.isCellAliveInNextGeneration();
		// then
		assertEquals(1, result);
	}
	
	@Test
	public void shouldReturnOneForAliveCellWithThreeNeighbors() {
		// given
		List<Cell> cellList = new ArrayList<>();
		cellList.add(new Cell(0,0,0));
		cellList.add(new Cell(0,1,0));
		cellList.add(new Cell(0,2,1));
		cellList.add(new Cell(1,0,0));
		cellList.add(new Cell(1,1,1));
		cellList.add(new Cell(1,2,1));
		cellList.add(new Cell(2,0,0));
		cellList.add(new Cell(2,1,0));
		cellList.add(new Cell(2,2,1));
		Game game = new Game(1,1,cellList);
		// when
		int result = game.isCellAliveInNextGeneration();
		// then
		assertEquals(1, result);
	}
	
	@Test
	public void shouldReturnOneForDeadCellWithThreeNeighbors() {
		// given
		List<Cell> cellList = new ArrayList<>();
		cellList.add(new Cell(0,0,0));
		cellList.add(new Cell(0,1,0));
		cellList.add(new Cell(0,2,1));
		cellList.add(new Cell(1,0,0));
		cellList.add(new Cell(1,1,0));
		cellList.add(new Cell(1,2,1));
		cellList.add(new Cell(2,0,0));
		cellList.add(new Cell(2,1,0));
		cellList.add(new Cell(2,2,1));
		Game game = new Game(1,1,cellList);
		// when
		int result = game.isCellAliveInNextGeneration();
		// then
		assertEquals(1, result);
	}
}
