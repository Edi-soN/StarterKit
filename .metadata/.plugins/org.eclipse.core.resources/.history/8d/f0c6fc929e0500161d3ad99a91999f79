package com.capgemini.java;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class Hand implements Comparable<Hand> {
	private boolean isColor;
	private Map<Integer, Integer> hand = new TreeMap<>(Collections.reverseOrder());

	public void addCardsToHand(List<Card> cardList) {
		checkCardsColor(cardList);
		for (Card card : cardList) {
			int cardValueCounter = 0;
			if (hand.get(card.getCardValue().getValue()) != null) {
				cardValueCounter = hand.get(card.getCardValue().getValue());
			}
			hand.put(card.getCardValue().getValue(), 1 + cardValueCounter);
		}
		sortCards();
	}

	private void checkCardsColor(List<Card> cardList) {
		boolean allCardsOneColor = true;
		String firstCardColor = "";
		for (Card card : cardList) {
			if (firstCardColor.isEmpty()) {
				firstCardColor = card.getCardColor();
			}
			if (card.getCardColor() != firstCardColor) {
				allCardsOneColor = false;
			}
		}
		this.isColor = allCardsOneColor;
	}

	public int calculateSetupValue() {
		return 0;
	}

	private void sortCards() {
		for(Integer key : hand.keySet()){
			
		}
	}

	@Override
	public int compareTo(Hand arg0) {
		// TODO Auto-generated method stub
		return 0;
	}

}
