package com.capgemini.java;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class Hand implements Comparable<Hand> {
	private boolean isColor;
	private List<Map.Entry<Integer, Integer>> sortedCards;
	private Map<Integer, Integer> hand = new TreeMap<>(Collections.reverseOrder());

	public void addCardsToHand(List<Card> cardList) {
		checkCardsColor(cardList);
		for (Card card : cardList) {
			int cardValueCounter = 0;
			if (hand.get(card.getCardValue().getValue()) != null) {
				cardValueCounter = hand.get(card.getCardValue().getValue());
			}
			hand.put(card.getCardValue().getValue(), 1 + cardValueCounter);
		}
		sortCards();
	}

	private void checkCardsColor(List<Card> cardList) {
		boolean allCardsOneColor = true;
		String firstCardColor = "";
		for (Card card : cardList) {
			if (firstCardColor.isEmpty()) {
				firstCardColor = card.getCardColor();
			}
			if (card.getCardColor() != firstCardColor) {
				allCardsOneColor = false;
			}
		}
		this.isColor = allCardsOneColor;
	}

	public int calculateSetupValue() {
		for()
		return 0;
	}

	private void sortCards() {
		sortedCards = new ArrayList<Map.Entry<Integer, Integer>>(hand.entrySet());
		Collections.sort(sortedCards, new sortByCardQuantityThenByCardValue<Integer, Integer>());
	}

	@Override
	public int compareTo(Hand arg0) {
		// TODO Auto-generated method stub
		return 0;
	}

	// Comparator that sorts Map.Entry objects with Comparable keys and values
	// Source:
	// http://stackoverflow.com/questions/3074154/sorting-a-hashmap-based-on-value-then-key
	private class sortByCardQuantityThenByCardValue<K extends Comparable<? super K>, V extends Comparable<? super V>>
			implements Comparator<Map.Entry<K, V>> {

		public int compare(Map.Entry<K, V> firstCard, Map.Entry<K, V> secondCard) {
			int cardQuantity = firstCard.getValue().compareTo(secondCard.getValue());
			if (cardQuantity != 0) {
				return cardQuantity;
			} else {
				return firstCard.getKey().compareTo(secondCard.getKey());
			}
		}

	}

}
