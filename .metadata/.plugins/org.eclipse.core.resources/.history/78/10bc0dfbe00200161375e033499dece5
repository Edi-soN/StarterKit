package com.capgemini.java;

import java.util.ArrayList;
import java.util.List;

public class Game {
	private int searchedCellPositionX = 0;
	private int searchedCellPositionY = 0;
	private List<Cell> sourceGeneration = new ArrayList<>();

	public Game(int cellPositionX, int cellPositionY, List<Cell> currentGeneration) {
		this.searchedCellPositionX = cellPositionX;
		this.searchedCellPositionY = cellPositionY;
		this.sourceGeneration = currentGeneration;
	}

	public int isCellAliveInNextGeneration() {
		int numberOfAliveNeighbors = countAliveNeighbors();
		boolean cellAlive = isCellAlive() == 1 ? true : false;

		if (cellAlive && (numberOfAliveNeighbors < 2 || numberOfAliveNeighbors > 3)
				|| (!cellAlive && numberOfAliveNeighbors != 3)) {
			return 0;
		}
		return 1;
	}

	private int isCellAlive() {
		for (Cell cell : sourceGeneration) {
			if (cell.getPositionX() == searchedCellPositionX && cell.getPositionY() == searchedCellPositionX) {
				return cell.getLife();
			}
		}
		return 0;
	}

	private int countAliveNeighbors() {
		int counter = 0;
		for (Cell cell : sourceGeneration) {
			int cX = cell.getPositionX();
			int cY = cell.getPositionY();
			if (searchedCellPositionX == cX && searchedCellPositionY - 1 == cY
					|| searchedCellPositionX == cX && searchedCellPositionY + 1 == cY
					|| searchedCellPositionX - 1 == cX && searchedCellPositionY - 1 == cY
					|| searchedCellPositionX - 1 == cX && searchedCellPositionY == cY
					|| searchedCellPositionX - 1 == cX && searchedCellPositionY + 1 == cY
					|| searchedCellPositionX + 1 == cX && searchedCellPositionY - 1 == cY
					|| searchedCellPositionX + 1 == cX && searchedCellPositionY == cY
					|| searchedCellPositionX + 1 == cX && searchedCellPositionY + 1 == cY) {
				counter += cell.getLife();
			}
		}
		return counter;
	}
}
