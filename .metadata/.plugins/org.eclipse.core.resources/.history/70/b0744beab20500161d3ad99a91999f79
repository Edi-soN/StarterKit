package com.capgemini.test;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.Test;

import com.capgemini.java.Card;
import com.capgemini.java.CardValue;
import com.capgemini.java.Converter;
import com.capgemini.java.Hand;

public class PokerTest {
	@Test
	public void shouldReturnCardValueOfEight() {
		// given
		Converter conv = new Converter();
		List<Card> cardList = conv.convertRawDataToCards();
		// when
		int result = cardList.get(0).getCardValue().getValue();
		// then
		assertEquals(8, result);
	}

	@Test
	public void shouldReturnCardValueOfTen() {
		// given
		Converter conv = new Converter();
		List<Card> cardList = conv.convertRawDataToCards();
		// when
		int result = cardList.get(1).getCardValue().getValue();
		// then
		assertEquals(10, result);
	}

	@Test
	public void shouldReturnZeroForHighCard() {
		// given
		Card[] cards = new Card[] { new Card(CardValue.TWO, "S"), new Card(CardValue.FIVE, "D"),
				new Card(CardValue.SEVEN, "C"), new Card(CardValue.NINE, "H"), new Card(CardValue.TEN, "H") };
		List<Card> cardList = new ArrayList<>(Arrays.asList(cards));
		Hand hand = new Hand();
		hand.addCardsToHand(cardList);
		// when
		int result = 0;
		// then
		assertEquals(0, result);
	}

	@Test
	public void shouldReturnOneForOnePair() {
		// given
		Card[] cards = new Card[] { new Card(CardValue.TWO, "S"), new Card(CardValue.TWO, "D"),
				new Card(CardValue.SEVEN, "C"), new Card(CardValue.NINE, "H"), new Card(CardValue.TEN, "H") };
		List<Card> cardList = new ArrayList<>(Arrays.asList(cards));
		Hand hand = new Hand();
		hand.addCardsToHand(cardList);
		// when
		int result = 0;
		// then
		assertEquals(1, result);
	}
}
